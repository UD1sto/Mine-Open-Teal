#pragma version 5
txn ApplicationID
int 0
==
bnz main_l34
txn OnCompletion
int DeleteApplication
==
bnz main_l33
txn OnCompletion
int UpdateApplication
==
bnz main_l32
txn OnCompletion
int OptIn
==
bnz main_l31
txn OnCompletion
int CloseOut
==
bnz main_l30
txn OnCompletion
int NoOp
==
bnz main_l7
err
main_l7:
txna ApplicationArgs 0
byte "inputStone"
==
bnz main_l29
txna ApplicationArgs 0
byte "evaluateStone"
==
bnz main_l28
txna ApplicationArgs 0
byte "incrementState"
==
bnz main_l27
txna ApplicationArgs 0
byte "incrementBatch"
==
bnz main_l26
txna ApplicationArgs 0
byte "setMerkleRoot"
==
bnz main_l25
txna ApplicationArgs 0
byte "revertBatch"
==
bnz main_l24
txna ApplicationArgs 0
byte "confirmBatchReceipt"
==
bnz main_l23
txna ApplicationArgs 0
byte "confirmBatchReceipt2"
==
bnz main_l22
txna ApplicationArgs 0
byte "createStone"
==
bnz main_l21
txna ApplicationArgs 0
byte "buyStone"
==
bnz main_l20
txna ApplicationArgs 0
byte "onCreation"
==
bnz main_l19
err
main_l19:
byte "merkleRoot"
int 2
callsub sub0
app_global_put
byte "merkleSize"
int 0
app_global_put
int 1
return
main_l20:
int 1
return
main_l21:
int 1
return
main_l22:
int 1
return
main_l23:
int 1
return
main_l24:
int 1
return
main_l25:
int 1
return
main_l26:
int 1
return
main_l27:
int 1
return
main_l28:
int 1
return
main_l29:
int 1
return
main_l30:
int 0
return
main_l31:
int 0
return
main_l32:
int 0
return
main_l33:
int 0
return
main_l34:
byte "owner"
txn Sender
app_global_put
byte "evaluator"
txn Sender
app_global_put
byte "opperator"
txn Sender
app_global_put
byte "BatchCurentNumber"
int 1
app_global_put
byte "BatchLimit"
int 100
app_global_put
byte "BatchMaxKg"
int 1000
app_global_put
byte "BatchCurrentKg"
int 0
app_global_put
byte "StatesMax"
int 7
app_global_put
byte "StatesCurrentNumber"
int 1
app_global_put
byte "MerkleRoot"
byte ""
app_global_put
byte "MerkleSize"
int 0
app_global_put
byte "url"
byte ""
app_global_put
int 1
return
sub0: // calc_init_root
store 0
byte ""
sha256
store 2
int 0
store 1
sub0_l1:
load 1
load 0
<
bz sub0_l3
load 2
load 2
concat
sha256
store 2
load 1
int 1
+
store 1
b sub0_l1
sub0_l3:
load 2
retsub